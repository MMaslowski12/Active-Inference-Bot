import numpy as np
from abc import ABC, abstractmethod
from .machinas import LinearMachina, QuadraticMachina, MachinaGenerator
from .distributions import Normal, DiscreteDistribution

class ConditionalDistribution(ABC):
    def __init__(self, machina_type, machina_params, std=1.0):
        self.machina = MachinaGenerator.create(machina_type, **machina_params)
        self.std = std
        # Combine machina variables with std
        self.variables = [f'machina.{var}' for var in self.machina.variables] + ['std']

    @abstractmethod
    def __call__(self, x):
        """Compute the conditional distribution for a given x"""
        pass

class ConditionalNormal(ConditionalDistribution):
    def __call__(self, x):
        """Compute the conditional distribution for a given x"""
        return Normal(self.machina(x), self.std)

class ConditionalDiscrete(ConditionalDistribution):
    def __call__(self, x):
        """
        Compute the conditional discrete distribution for a given x
        Returns a DiscreteDistribution with probabilities generated by the machina
        """
        probabilities = self.machina(x)
        return DiscreteDistribution(probabilities) 